export const mockRequestContext: AWSLambda.APIGatewayEventRequestContext = {
  accountId: 'foobar',
  apiId: 'foobar',
  httpMethod: 'GET',
  protocol: '',
  authorizer: undefined,
  identity: {
    principalOrgId: null,
    accessKey: null,
    accountId: null,
    apiKey: null,
    apiKeyId: null,
    caller: null,
    cognitoAuthenticationProvider: null,
    cognitoAuthenticationType: null,
    cognitoIdentityId: null,
    cognitoIdentityPoolId: null,
    sourceIp: 'foobar',
    user: null,
    userAgent: 'foobar',
    userArn: null,
  },
  path: '/',
  requestId: 'foobar',
  requestTimeEpoch: 0,
  resourceId: 'foobar',
  resourcePath: 'foobar',
  stage: 'foobar',
};

export const mockEvent: AWSLambda.APIGatewayProxyEvent = {
  requestContext: mockRequestContext,
  body: '',
  headers: {},
  multiValueHeaders: {},
  httpMethod: '',
  isBase64Encoded: false,
  path: '',
  pathParameters: {},
  queryStringParameters: {},
  multiValueQueryStringParameters: null,
  stageVariables: null,
  resource: '',
};

export const mockContext: AWSLambda.Context = {
  awsRequestId: 'foobar',
  callbackWaitsForEmptyEventLoop: true,
  done: () => undefined,
  fail: () => undefined,
  functionName: 'foobar',
  functionVersion: 'foobar',
  getRemainingTimeInMillis: () => 0,
  invokedFunctionArn: 'foobar',
  logGroupName: 'foobar',
  logStreamName: 'foobar',
  memoryLimitInMB: '128',
  succeed: () => undefined,
};
